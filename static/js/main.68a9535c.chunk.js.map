{"version":3,"sources":["jitsi-config.js","App.js","serviceWorker.js","index.js"],"names":["JitsiMeetJS","window","setLogLevel","logLevels","ERROR","initOptions","disableAudioLevels","desktopSharingChromeExtId","desktopSharingChromeDisabled","desktopSharingChromeSources","desktopSharingChromeMinExtVersion","desktopSharingFirefoxDisabled","config","hosts","domain","muc","bosh","clientNode","confOptions","openBridgeChannel","onConnectionFailed","console","error","onDeviceListChanged","devices","info","SimpleWebRtc","localVideoEl","remoteVideosEl","localTracks","remoteTracks","callbacks","room","isJoined","onConnectionSuccess","emit","disconnect","log","connection","removeEventListener","events","CONNECTION_ESTABLISHED","CONNECTION_FAILED","CONNECTION_DISCONNECTED","on","event","cb","push","data","cbs","forEach","joinRoom","roomName","initJitsiConference","conference","TRACK_ADDED","onRemoteTrack","TRACK_REMOVED","track","chooseMainVideo","containers","videoElement","removeChild","dispose","CONFERENCE_JOINED","onConferenceJoined","USER_JOINED","id","USER_LEFT","onUserLeft","TRACK_MUTE_CHANGED","getType","isMuted","type","name","isLocal","DISPLAY_NAME_CHANGED","userID","displayName","TRACK_AUDIO_LEVEL_CHANGED","audioLevel","PHONE_NUMBER_CHANGED","getPhoneNumber","getPhonePin","join","onLocalTracks","i","addEventListener","LOCAL_TRACK_STOPPED","TRACK_AUDIO_OUTPUT_CHANGED","deviceId","video","document","createElement","autoplay","append","attach","audio","muted","addTrack","videoType","participant","getParticipantId","detach","querySelector","unload","leave","mute","a","unmute","toggleVideo","videoTrack","pop","removeTrack","createLocalTracks","mainTrack","Object","values","flat","find","shareScreen","then","stopShareScreen","this","init","JitsiConnection","bind","mediaDevices","DEVICE_LIST_CHANGED","connect","catch","roomNameDefault","URLSearchParams","location","search","get","Modal","active","onSubmit","useState","setName","setRoomName","className","ev","preventDefault","placeholder","onChange","target","value","App","isReady","setIsReady","sharingScreen","setShringScreen","setMuted","setVideo","mainVideoIsLocal","setMainVideoIsLocal","localVideosRef","useRef","remoteVideosRef","webrtcRef","mainVideoRef","someoneSharingScreenRef","current","useEffect","webrtc","srcObject","stream","roomNameFormatted","toLowerCase","replace","history","pushState","pathname","ref","onClick","autoPlay","playsInline","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.68a9535c.chunk.js","sourcesContent":["const { JitsiMeetJS } = window;\n\nJitsiMeetJS.setLogLevel(JitsiMeetJS.logLevels.ERROR);\n\nexport const initOptions = {\n  disableAudioLevels: true,\n\n  // The ID of the jidesha extension for Chrome.\n  desktopSharingChromeExtId: 'mbocklcggfhnbahlnepmldehdhpjfcjp',\n\n  // Whether desktop sharing should be disabled on Chrome.\n  desktopSharingChromeDisabled: false,\n\n  // The media sources to use when using screen sharing with the Chrome\n  // extension.\n  desktopSharingChromeSources: ['screen', 'window'],\n\n  // Required version of Chrome extension\n  desktopSharingChromeMinExtVersion: '0.1',\n\n  // Whether desktop sharing should be disabled on Firefox.\n  desktopSharingFirefoxDisabled: true,\n};\n\nexport const config = {\n  hosts: {\n    domain: 'beta.meet.jit.si',\n    muc: 'conference.beta.meet.jit.si', // FIXME: use XEP-0030\n  },\n  bosh: 'https://beta.meet.jit.si/http-bind', // FIXME: use xep-0156 for that\n\n  // The name of client node advertised in XEP-0115 'c' stanza\n  clientNode: 'https://jitsi.org/jitsimeet',\n};\n\nexport const confOptions = {\n  openBridgeChannel: true,\n};\n\nfunction onConnectionFailed() {\n  console.error('Connection Failed!');\n}\n\nfunction onDeviceListChanged(devices) {\n  console.info('current devices', devices);\n}\n\nclass SimpleWebRtc {\n  localVideoEl = null;\n  remoteVideosEl = null;\n  localTracks = [];\n  remoteTracks = {};\n  callbacks = {};\n  room = null;\n  isJoined = false;\n\n  constructor({ localVideoEl, remoteVideosEl }) {\n    this.localVideoEl = localVideoEl;\n    this.remoteVideosEl = remoteVideosEl;\n\n    JitsiMeetJS.init(initOptions);\n    const connection = new JitsiMeetJS.JitsiConnection(null, null, config);\n    this.connection = connection;\n\n    connection.addEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,\n      this.onConnectionSuccess.bind(this)\n    );\n    connection.addEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_FAILED,\n      onConnectionFailed\n    );\n    connection.addEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,\n      this.disconnect.bind(this)\n    );\n\n    JitsiMeetJS.mediaDevices.addEventListener(\n      JitsiMeetJS.events.mediaDevices.DEVICE_LIST_CHANGED,\n      onDeviceListChanged\n    );\n\n    this.connection.connect();\n\n    JitsiMeetJS.createLocalTracks({ devices: ['audio', 'video'] })\n      .then(this.onLocalTracks)\n      .catch((error) => {\n        throw error;\n      });\n  }\n\n  onConnectionSuccess = () => {\n    this.emit('readyToCall');\n  };\n\n  disconnect = () => {\n    console.log('disconnect!');\n    this.connection.removeEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_ESTABLISHED,\n      this.onConnectionSuccess\n    );\n    this.connection.removeEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_FAILED,\n      onConnectionFailed\n    );\n    this.connection.removeEventListener(\n      JitsiMeetJS.events.connection.CONNECTION_DISCONNECTED,\n      this.disconnect\n    );\n  };\n\n  on = (event, cb) => {\n    if (!this.callbacks[event]) this.callbacks[event] = [];\n    this.callbacks[event].push(cb);\n  };\n\n  emit = (event, data) => {\n    const cbs = this.callbacks[event];\n    if (cbs) {\n      cbs.forEach((cb) => cb(data));\n    }\n  };\n\n  joinRoom = (roomName) => {\n    console.log('connecting to: ', roomName);\n    const room = this.connection.initJitsiConference(roomName, confOptions);\n    this.room = room;\n\n    room.on(JitsiMeetJS.events.conference.TRACK_ADDED, this.onRemoteTrack);\n    room.on(JitsiMeetJS.events.conference.TRACK_REMOVED, (track) => {\n      this.chooseMainVideo();\n      console.log(`track removed!!!${track}`);\n      track.containers.forEach((videoElement) => {\n        console.log('removing....:', videoElement);\n        try {\n          this.remoteVideosEl.removeChild(videoElement);\n        } catch {}\n      });\n      track.dispose();\n      this.chooseMainVideo();\n    });\n    room.on(\n      JitsiMeetJS.events.conference.CONFERENCE_JOINED,\n      this.onConferenceJoined\n    );\n    room.on(JitsiMeetJS.events.conference.USER_JOINED, (id) => {\n      console.log('user join');\n      this.remoteTracks[id] = [];\n    });\n    room.on(JitsiMeetJS.events.conference.USER_LEFT, this.onUserLeft);\n    room.on(JitsiMeetJS.events.conference.TRACK_MUTE_CHANGED, (track) => {\n      console.log(`${track.getType()} - ${track.isMuted()}`);\n      const event = track.isMuted() ? 'mute' : 'unmute';\n      const type = track.getType();\n      this.emit(event, {\n        name: type,\n        type,\n        isLocal: track.isLocal(),\n      });\n    });\n    room.on(\n      JitsiMeetJS.events.conference.DISPLAY_NAME_CHANGED,\n      (userID, displayName) => console.log(`${userID} - ${displayName}`)\n    );\n    room.on(\n      JitsiMeetJS.events.conference.TRACK_AUDIO_LEVEL_CHANGED,\n      (userID, audioLevel) => console.log(`${userID} - ${audioLevel}`)\n    );\n    room.on(JitsiMeetJS.events.conference.PHONE_NUMBER_CHANGED, () =>\n      console.log(`${room.getPhoneNumber()} - ${room.getPhonePin()}`)\n    );\n\n    room.join();\n  };\n\n  onLocalTracks = (localTracks) => {\n    this.localTracks = localTracks;\n    localTracks.forEach((track, i) => {\n      track.addEventListener(\n        JitsiMeetJS.events.track.TRACK_AUDIO_LEVEL_CHANGED,\n        (audioLevel) => console.log(`Audio Level local: ${audioLevel}`)\n      );\n      track.addEventListener(JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, () =>\n        console.log('local track stoped')\n      );\n      track.addEventListener(\n        JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED,\n        (deviceId) =>\n          console.log(`track audio output device was changed to ${deviceId}`)\n      );\n      if (track.getType() === 'video') {\n        const video = document.createElement('video');\n        video.id = `localVideo`;\n        video.autoplay = true;\n        this.localVideoEl.append(video);\n        track.attach(video);\n        this.emit('mainVideo', {\n          track,\n        });\n      } else {\n        const audio = document.createElement('audio');\n        audio.autoplay = true;\n        audio.muted = true;\n        audio.id = `localAudio`;\n        this.localVideoEl.append(audio);\n        track.attach(audio);\n      }\n\n      console.log(this.isJoined);\n      if (this.isJoined) {\n        this.room.addTrack(track);\n      }\n    });\n  };\n\n  onRemoteTrack = (track) => {\n    if (track.isLocal()) {\n      return;\n    }\n\n    if (track.videoType === 'desktop') {\n      this.emit('sharingScreen', { track });\n      return;\n    } else {\n      this.emit('stopSharingScreen', { track });\n    }\n\n    const participant = track.getParticipantId();\n\n    if (!this.remoteTracks[participant]) {\n      this.remoteTracks[participant] = [];\n    }\n\n    this.remoteTracks[participant].push(track);\n\n    track.addEventListener(\n      JitsiMeetJS.events.track.TRACK_AUDIO_LEVEL_CHANGED,\n      (audioLevel) => console.log(`Audio Level remote: ${audioLevel}`)\n    );\n    track.addEventListener(JitsiMeetJS.events.track.TRACK_MUTE_CHANGED, () =>\n      console.log('remote track muted')\n    );\n    track.addEventListener(JitsiMeetJS.events.track.LOCAL_TRACK_STOPPED, () =>\n      console.log('remote track stoped')\n    );\n    track.addEventListener(\n      JitsiMeetJS.events.track.TRACK_AUDIO_OUTPUT_CHANGED,\n      (deviceId) =>\n        console.log(`track audio output device was changed to ${deviceId}`)\n    );\n    const id = 'remote' + participant + track.getType();\n\n    console.log(this.remoteVideosEl);\n    if (track.getType() === 'video') {\n      const video = document.createElement('video');\n      video.id = id;\n      video.autoplay = true;\n      this.remoteVideosEl.append(video);\n      track.attach(video);\n      this.emit('mainVideo', {\n        track,\n      });\n    } else {\n      const audio = document.createElement('audio');\n      audio.autoplay = true;\n      audio.id = id;\n      this.remoteVideosEl.append(audio);\n      track.attach(audio);\n    }\n\n    console.log('add the remote track');\n  };\n\n  onConferenceJoined = () => {\n    if (this.isJoined) return;\n\n    console.log('conference joined!');\n    this.isJoined = true;\n    this.localTracks.forEach((track) => {\n      this.room.addTrack(track);\n    });\n  };\n\n  onUserLeft = (id) => {\n    console.log('user left:', id);\n    if (!this.remoteTracks[id]) {\n      return;\n    }\n    const tracks = this.remoteTracks[id];\n\n    tracks.forEach((track) => {\n      console.log('deleting track', id, track.getType());\n      track.detach(document.querySelector(`#remote${id}${track.getType()}`));\n    });\n\n    this.remoteTracks[id] = [];\n    this.chooseMainVideo();\n  };\n\n  unload = () => {\n    this.localTracks.forEach((track) => {\n      track.dispose();\n    });\n    this.room.leave();\n    this.connection.disconnect();\n  };\n\n  mute = async () => {\n    const audioTrack = this.localTracks[0];\n    audioTrack.mute();\n  };\n\n  unmute = async () => {\n    const audioTrack = this.localTracks[0];\n    audioTrack.unmute();\n  };\n\n  toggleVideo = async () => {\n    const videoTrack = this.localTracks[1];\n    if (videoTrack) {\n      videoTrack.dispose();\n      this.localTracks.pop();\n      this.room.removeTrack(videoTrack);\n      return true;\n    } else {\n      const [track] = await JitsiMeetJS.createLocalTracks({\n        devices: ['video'],\n      });\n      const video = document.querySelector('#localVideo');\n      this.localTracks.push(track);\n      track.attach(video);\n      this.room.addTrack(track);\n      return false;\n    }\n  };\n\n  chooseMainVideo = () => {\n    const someRemoteTrack = Object.values(this.remoteTracks)\n      .flat()\n      .find((track) => console.log(track) || track?.getType() === 'video');\n\n    const mainTrack = someRemoteTrack || this.localTracks[1];\n\n    this.emit('mainVideo', {\n      track: mainTrack,\n    });\n  };\n\n  shareScreen = () => {\n    const videoTrack = this.localTracks[1];\n    if (videoTrack) {\n      videoTrack.dispose();\n      this.localTracks.pop();\n    }\n\n    JitsiMeetJS.createLocalTracks({\n      devices: ['desktop'],\n    }).then(([track]) => {\n      this.localTracks[1] = track;\n      this.room.addTrack(track);\n      this.emit('sharingScreen', { track });\n    });\n  };\n\n  stopShareScreen = () => {\n    const videoTrack = this.localTracks[1];\n    if (videoTrack) {\n      videoTrack.dispose();\n      this.localTracks.pop();\n    }\n\n    JitsiMeetJS.createLocalTracks({\n      devices: ['video'],\n    }).then(([track]) => {\n      const video = document.querySelector('#localVideo');\n      track.attach(video);\n      this.localTracks[1] = track;\n      this.room.addTrack(track);\n      this.emit('stopSharingScreen', { track });\n      this.chooseMainVideo();\n    });\n  };\n}\n\nexport { SimpleWebRtc };\n","import React, { useEffect, useState, useRef } from 'react';\nimport { SimpleWebRtc } from './jitsi-config';\nimport './App.scss';\n\nconst urlParams = new URLSearchParams(window.location.search);\nconst roomNameDefault = urlParams.get('room');\nfunction Modal({ active, onSubmit }) {\n  const [name, setName] = useState('');\n  const [roomName, setRoomName] = useState(roomNameDefault || '');\n\n  return (\n    <div className={`modal ${active ? 'is-active' : ''}`}>\n      <div className=\"modal-background\"></div>\n      <div className=\"modal-content\">\n        <form\n          className=\"join-modal\"\n          onSubmit={(ev) => {\n            ev.preventDefault();\n            onSubmit({ name, roomName });\n          }}\n        >\n          <h1 className=\"title is-1\">Enter room</h1>\n          <div className=\"field\">\n            <label className=\"label\">Name</label>\n            <div className=\"control\">\n              <input\n                className=\"input is-primary\"\n                type=\"text\"\n                placeholder=\"John Smith\"\n                onChange={(ev) => setName(ev.target.value)}\n                value={name}\n              />\n            </div>\n          </div>\n          <div className=\"field\">\n            <label className=\"label\">Room name</label>\n            <div className=\"control\">\n              <input\n                className=\"input is-primary\"\n                type=\"text\"\n                placeholder=\"Johnsroom\"\n                onChange={(ev) => setRoomName(ev.target.value)}\n                value={roomName}\n              />\n            </div>\n          </div>\n          <div className=\"field is-grouped\">\n            <div className=\"control\">\n              <button className=\"button is-link\">Enter room</button>\n            </div>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  const [isReady, setIsReady] = useState(false);\n  const [sharingScreen, setShringScreen] = useState(false);\n  const [muted, setMuted] = useState(false);\n  const [video, setVideo] = useState(true);\n  const [mainVideoIsLocal, setMainVideoIsLocal] = useState(true);\n  const [name, setName] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const localVideosRef = useRef();\n  const remoteVideosRef = useRef();\n  const webrtcRef = useRef();\n  const mainVideoRef = useRef();\n  const someoneSharingScreenRef = useRef(false);\n\n  useEffect(() => {\n    if (!isReady) return;\n    const webrtc = new SimpleWebRtc({\n      localVideoEl: localVideosRef.current,\n      remoteVideosEl: remoteVideosRef.current,\n    });\n\n    webrtcRef.current = webrtc;\n\n    webrtc.on('readyToCall', () => {\n      console.log('jajaja');\n      webrtc.joinRoom(roomName);\n    });\n\n    webrtc.on('mute', ({ name, isLocal }) => {\n      if (!isLocal) return;\n      setMuted(true);\n    });\n\n    webrtc.on('unmute', ({ name, isLocal }) => {\n      setMuted(false);\n    });\n\n    webrtc.on('sharingScreen', ({ track }) => {\n      if (!track) return;\n\n      someoneSharingScreenRef.current = true;\n      mainVideoRef.current.srcObject = track.stream;\n      setMainVideoIsLocal(false);\n    });\n\n    webrtc.on('stopSharingScreen', () => {\n      someoneSharingScreenRef.current = false;\n      mainVideoRef.current.srcObject = null;\n    });\n\n    return () => {\n      webrtc.unload();\n    };\n  }, [isReady]);\n\n  function handleShareScheen() {\n    if (sharingScreen) {\n      webrtcRef.current.stopShareScreen();\n      setShringScreen(false);\n    } else {\n      webrtcRef.current.shareScreen();\n      setShringScreen(true);\n    }\n  }\n\n  async function handleMute() {\n    if (muted) {\n      webrtcRef.current.unmute();\n    } else {\n      webrtcRef.current.mute();\n    }\n  }\n\n  async function handleToggleVideo() {\n    const video = await webrtcRef.current.toggleVideo();\n\n    setVideo(!video);\n  }\n\n  function handleEnterConf({ name, roomName }) {\n    const roomNameFormatted = roomName\n      .toLowerCase()\n      .replace(/\\s/g, '')\n      .replace(/[\\W_]+/g, '');\n\n    window.history.pushState(\n      null,\n      roomNameFormatted,\n      `${window.location.pathname}?room=${roomNameFormatted}`\n    );\n    setRoomName(roomNameFormatted);\n    setName(name);\n    setIsReady(true);\n  }\n\n  return (\n    <div className=\"App\">\n      <Modal active={!isReady} onSubmit={handleEnterConf} />\n      <div ref={localVideosRef} className=\"local-videos\"></div>\n      <div ref={remoteVideosRef} className=\"remote-videos\"></div>\n\n      <div className=\"controls\">\n        <button className=\"button is-danger is-rounded\" onClick={handleMute}>\n          {muted ? (\n            <i className=\"fas fa-microphone-slash\"></i>\n          ) : (\n            <i className=\"fas fa-microphone\"></i>\n          )}\n        </button>\n        <button\n          className=\"button is-info is-rounded\"\n          onClick={handleToggleVideo}\n        >\n          {video ? (\n            <i className=\"fas fa-video\"></i>\n          ) : (\n            <i className=\"fas fa-video-slash\"></i>\n          )}\n        </button>\n        <button\n          className=\"button is-success is-rounded\"\n          onClick={handleShareScheen}\n        >\n          {sharingScreen ? (\n            <i className=\"fas fa-window-close\"></i>\n          ) : (\n            <i className=\"fas fa-desktop\"></i>\n          )}\n        </button>\n      </div>\n\n      <div className=\"main-video\">\n        <video\n          ref={mainVideoRef}\n          autoPlay\n          playsInline\n          className={mainVideoIsLocal ? 'mirror' : ''}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}